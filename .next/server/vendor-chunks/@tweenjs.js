"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tweenjs";
exports.ids = ["vendor-chunks/@tweenjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tweenjs/tween.js/dist/tween.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Easing: () => (/* binding */ Easing),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   Interpolation: () => (/* binding */ Interpolation),\n/* harmony export */   Sequence: () => (/* binding */ Sequence),\n/* harmony export */   Tween: () => (/* binding */ Tween),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAll: () => (/* binding */ getAll),\n/* harmony export */   nextId: () => (/* binding */ nextId),\n/* harmony export */   now: () => (/* binding */ now$1),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   removeAll: () => (/* binding */ removeAll),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */ var Easing = {\n    Linear: {\n        None: function(amount) {\n            return amount;\n        }\n    },\n    Quadratic: {\n        In: function(amount) {\n            return amount * amount;\n        },\n        Out: function(amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount;\n            }\n            return -0.5 * (--amount * (amount - 2) - 1);\n        }\n    },\n    Cubic: {\n        In: function(amount) {\n            return amount * amount * amount;\n        },\n        Out: function(amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        }\n    },\n    Quartic: {\n        In: function(amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function(amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount;\n            }\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        }\n    },\n    Quintic: {\n        In: function(amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function(amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        }\n    },\n    Sinusoidal: {\n        In: function(amount) {\n            return 1 - Math.cos(amount * Math.PI / 2);\n        },\n        Out: function(amount) {\n            return Math.sin(amount * Math.PI / 2);\n        },\n        InOut: function(amount) {\n            return 0.5 * (1 - Math.cos(Math.PI * amount));\n        }\n    },\n    Exponential: {\n        In: function(amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function(amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function(amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            if ((amount *= 2) < 1) {\n                return 0.5 * Math.pow(1024, amount - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        }\n    },\n    Circular: {\n        In: function(amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function(amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function(amount) {\n            if ((amount *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        }\n    },\n    Elastic: {\n        In: function(amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function(amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function(amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            amount *= 2;\n            if (amount < 1) {\n                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        }\n    },\n    Back: {\n        In: function(amount) {\n            var s = 1.70158;\n            return amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function(amount) {\n            var s = 1.70158;\n            return --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function(amount) {\n            var s = 1.70158 * 1.525;\n            if ((amount *= 2) < 1) {\n                return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            }\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        }\n    },\n    Bounce: {\n        In: function(amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function(amount) {\n            if (amount < 1 / 2.75) {\n                return 7.5625 * amount * amount;\n            } else if (amount < 2 / 2.75) {\n                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            } else if (amount < 2.5 / 2.75) {\n                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            } else {\n                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n            }\n        },\n        InOut: function(amount) {\n            if (amount < 0.5) {\n                return Easing.Bounce.In(amount * 2) * 0.5;\n            }\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        }\n    }\n};\nvar now;\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\n// eslint-disable-next-line\n// @ts-ignore\nif (typeof self === \"undefined\" && typeof process !== \"undefined\" && process.hrtime) {\n    now = function() {\n        // eslint-disable-next-line\n        // @ts-ignore\n        var time = process.hrtime();\n        // Convert [seconds, nanoseconds] to milliseconds.\n        return time[0] * 1000 + time[1] / 1000000;\n    };\n} else if (typeof self !== \"undefined\" && self.performance !== undefined && self.performance.now !== undefined) {\n    // This must be bound, because directly assigning this function\n    // leads to an invocation exception in Chrome.\n    now = self.performance.now.bind(self.performance);\n} else if (Date.now !== undefined) {\n    now = Date.now;\n} else {\n    now = function() {\n        return new Date().getTime();\n    };\n}\nvar now$1 = now;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */ var Group = /** @class */ function() {\n    function Group() {\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n    }\n    Group.prototype.getAll = function() {\n        var _this = this;\n        return Object.keys(this._tweens).map(function(tweenId) {\n            return _this._tweens[tweenId];\n        });\n    };\n    Group.prototype.removeAll = function() {\n        this._tweens = {};\n    };\n    Group.prototype.add = function(tween) {\n        this._tweens[tween.getId()] = tween;\n        this._tweensAddedDuringUpdate[tween.getId()] = tween;\n    };\n    Group.prototype.remove = function(tween) {\n        delete this._tweens[tween.getId()];\n        delete this._tweensAddedDuringUpdate[tween.getId()];\n    };\n    Group.prototype.update = function(time, preserve) {\n        if (time === void 0) {\n            time = now$1();\n        }\n        if (preserve === void 0) {\n            preserve = false;\n        }\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0) {\n            return false;\n        }\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while(tweenIds.length > 0){\n            this._tweensAddedDuringUpdate = {};\n            for(var i = 0; i < tweenIds.length; i++){\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve) {\n                    delete this._tweens[tweenIds[i]];\n                }\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n        return true;\n    };\n    return Group;\n}();\n/**\n *\n */ var Interpolation = {\n    Linear: function(v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function(v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for(var i = 0; i <= n; i++){\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function(v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor(f = m * (1 + k));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        } else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function(p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function(n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: function() {\n            var a = [\n                1\n            ];\n            return function(n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for(var i = n; i > 1; i--){\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        }(),\n        CatmullRom: function(p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        }\n    }\n};\n/**\n * Utils\n */ var Sequence = /** @class */ function() {\n    function Sequence() {}\n    Sequence.nextId = function() {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}();\nvar mainGroup = new Group();\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */ var Tween = /** @class */ function() {\n    function Tween(_object, _group) {\n        if (_group === void 0) {\n            _group = mainGroup;\n        }\n        this._object = _object;\n        this._group = _group;\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._goToEnd = false;\n    }\n    Tween.prototype.getId = function() {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function() {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function() {\n        return this._isPaused;\n    };\n    Tween.prototype.to = function(properties, duration) {\n        // TODO? restore this, then update the 07_dynamic_to example to set fox\n        // tween's to on each update. That way the behavior is opt-in (there's\n        // currently no opt-out).\n        // for (const prop in properties) this._valuesEnd[prop] = properties[prop]\n        this._valuesEnd = Object.create(properties);\n        if (duration !== undefined) {\n            this._duration = duration;\n        }\n        return this;\n    };\n    Tween.prototype.duration = function(d) {\n        this._duration = d;\n        return this;\n    };\n    Tween.prototype.start = function(time) {\n        if (this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for(var property in this._valuesStartRepeat){\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time !== undefined ? typeof time === \"string\" ? now$1() + parseFloat(time) : time : now$1();\n        this._startTime += this._delayTime;\n        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);\n        return this;\n    };\n    Tween.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {\n        for(var property in _valuesEnd){\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? \"array\" : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === \"undefined\" || propType === \"function\") {\n                continue;\n            }\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) {\n                    continue;\n                }\n                // handle an array of relative values\n                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));\n                // Create a local copy of the Array with the start value at the front\n                _valuesEnd[property] = [\n                    startValue\n                ].concat(endValues);\n            }\n            // handle the deepness of the values\n            if ((propType === \"object\" || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                // eslint-disable-next-line\n                for(var prop in startValue){\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property][prop] = startValue[prop];\n                }\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {}; // TODO? repeat nested values? And yoyo? And array values?\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);\n            } else {\n                // Save the starting value, but only once.\n                if (typeof _valuesStart[property] === \"undefined\") {\n                    _valuesStart[property] = startValue;\n                }\n                if (!startValueIsArray) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                }\n                if (isInterpolationList) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                } else {\n                    _valuesStartRepeat[property] = _valuesStart[property] || 0;\n                }\n            }\n        }\n    };\n    Tween.prototype.stop = function() {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) {\n            this._onStopCallback(this._object);\n        }\n        return this;\n    };\n    Tween.prototype.end = function() {\n        this._goToEnd = true;\n        this.update(Infinity);\n        return this;\n    };\n    Tween.prototype.pause = function(time) {\n        if (time === void 0) {\n            time = now$1();\n        }\n        if (this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = true;\n        this._pauseStart = time;\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        return this;\n    };\n    Tween.prototype.resume = function(time) {\n        if (time === void 0) {\n            time = now$1();\n        }\n        if (!this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function() {\n        for(var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++){\n            this._chainedTweens[i].stop();\n        }\n        return this;\n    };\n    Tween.prototype.group = function(group) {\n        this._group = group;\n        return this;\n    };\n    Tween.prototype.delay = function(amount) {\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function(times) {\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function(amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function(yoyo) {\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function(easingFunction) {\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function(interpolationFunction) {\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    Tween.prototype.chain = function() {\n        var tweens = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            tweens[_i] = arguments[_i];\n        }\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function(callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function(callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function(callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function(callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function(callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     */ Tween.prototype.update = function(time, autoStart) {\n        if (time === void 0) {\n            time = now$1();\n        }\n        if (autoStart === void 0) {\n            autoStart = true;\n        }\n        if (this._isPaused) return true;\n        var property;\n        var elapsed;\n        var endTime = this._startTime + this._duration;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (time > endTime) return false;\n            if (autoStart) this.start(time);\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) {\n            return true;\n        }\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) {\n                this._onStartCallback(this._object);\n            }\n            this._onStartCallbackFired = true;\n        }\n        elapsed = (time - this._startTime) / this._duration;\n        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) {\n            this._onUpdateCallback(this._object, elapsed);\n        }\n        if (elapsed === 1) {\n            if (this._repeat > 0) {\n                if (isFinite(this._repeat)) {\n                    this._repeat--;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for(property in this._valuesStartRepeat){\n                    if (!this._yoyo && typeof this._valuesEnd[property] === \"string\") {\n                        this._valuesStartRepeat[property] = // eslint-disable-next-line\n                        // @ts-ignore FIXME?\n                        this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    }\n                    if (this._yoyo) {\n                        this._swapEndStartRepeatValues(property);\n                    }\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) {\n                    this._reversed = !this._reversed;\n                }\n                if (this._repeatDelayTime !== undefined) {\n                    this._startTime = time + this._repeatDelayTime;\n                } else {\n                    this._startTime = time + this._delayTime;\n                }\n                if (this._onRepeatCallback) {\n                    this._onRepeatCallback(this._object);\n                }\n                return true;\n            } else {\n                if (this._onCompleteCallback) {\n                    this._onCompleteCallback(this._object);\n                }\n                for(var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++){\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    this._chainedTweens[i].start(this._startTime + this._duration);\n                }\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {\n        for(var property in _valuesEnd){\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) {\n                _object[property] = this._interpolationFunction(end, value);\n            } else if (typeof end === \"object\" && end) {\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._updateProperties(_object[property], start, end, value);\n            } else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === \"number\") {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function(start, end) {\n        if (typeof end !== \"string\") {\n            return end;\n        }\n        if (end.charAt(0) === \"+\" || end.charAt(0) === \"-\") {\n            return start + parseFloat(end);\n        } else {\n            return parseFloat(end);\n        }\n    };\n    Tween.prototype._swapEndStartRepeatValues = function(property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === \"string\") {\n            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        } else {\n            this._valuesStartRepeat[property] = this._valuesEnd[property];\n        }\n        this._valuesEnd[property] = tmp;\n    };\n    return Tween;\n}();\nvar VERSION = \"18.6.4\";\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */ var nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */ var TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\nvar getAll = TWEEN.getAll.bind(TWEEN);\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\nvar add = TWEEN.add.bind(TWEEN);\nvar remove = TWEEN.remove.bind(TWEEN);\nvar update = TWEEN.update.bind(TWEEN);\nvar exports = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now$1,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    getAll: getAll,\n    removeAll: removeAll,\n    add: add,\n    remove: remove,\n    update: update\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (exports);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR3ZWVuanMvdHdlZW4uanMvZGlzdC90d2Vlbi5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUNELElBQUlBLFNBQVM7SUFDVEMsUUFBUTtRQUNKQyxNQUFNLFNBQVVDLE1BQU07WUFDbEIsT0FBT0E7UUFDWDtJQUNKO0lBQ0FDLFdBQVc7UUFDUEMsSUFBSSxTQUFVRixNQUFNO1lBQ2hCLE9BQU9BLFNBQVNBO1FBQ3BCO1FBQ0FHLEtBQUssU0FBVUgsTUFBTTtZQUNqQixPQUFPQSxTQUFVLEtBQUlBLE1BQUs7UUFDOUI7UUFDQUksT0FBTyxTQUFVSixNQUFNO1lBQ25CLElBQUksQ0FBQ0EsVUFBVSxLQUFLLEdBQUc7Z0JBQ25CLE9BQU8sTUFBTUEsU0FBU0E7WUFDMUI7WUFDQSxPQUFPLENBQUMsTUFBTyxHQUFFQSxTQUFVQSxDQUFBQSxTQUFTLEtBQUs7UUFDN0M7SUFDSjtJQUNBSyxPQUFPO1FBQ0hILElBQUksU0FBVUYsTUFBTTtZQUNoQixPQUFPQSxTQUFTQSxTQUFTQTtRQUM3QjtRQUNBRyxLQUFLLFNBQVVILE1BQU07WUFDakIsT0FBTyxFQUFFQSxTQUFTQSxTQUFTQSxTQUFTO1FBQ3hDO1FBQ0FJLE9BQU8sU0FBVUosTUFBTTtZQUNuQixJQUFJLENBQUNBLFVBQVUsS0FBSyxHQUFHO2dCQUNuQixPQUFPLE1BQU1BLFNBQVNBLFNBQVNBO1lBQ25DO1lBQ0EsT0FBTyxNQUFPLEVBQUNBLFVBQVUsS0FBS0EsU0FBU0EsU0FBUztRQUNwRDtJQUNKO0lBQ0FNLFNBQVM7UUFDTEosSUFBSSxTQUFVRixNQUFNO1lBQ2hCLE9BQU9BLFNBQVNBLFNBQVNBLFNBQVNBO1FBQ3RDO1FBQ0FHLEtBQUssU0FBVUgsTUFBTTtZQUNqQixPQUFPLElBQUksRUFBRUEsU0FBU0EsU0FBU0EsU0FBU0E7UUFDNUM7UUFDQUksT0FBTyxTQUFVSixNQUFNO1lBQ25CLElBQUksQ0FBQ0EsVUFBVSxLQUFL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R0FBRyxDQUFDZixJQUFJLENBQUNtSjtBQUN6QixJQUFJakksU0FBU2lJLE1BQU1qSSxNQUFNLENBQUNsQixJQUFJLENBQUNtSjtBQUMvQixJQUFJaEksU0FBU2dJLE1BQU1oSSxNQUFNLENBQUNuQixJQUFJLENBQUNtSjtBQUMvQixJQUFJQyxVQUFVO0lBQ1ZuTCxRQUFRQTtJQUNSbUMsT0FBT0E7SUFDUHFCLGVBQWVBO0lBQ2ZoQyxLQUFLVTtJQUNMaUQsVUFBVUE7SUFDVkMsUUFBUUE7SUFDUkcsT0FBT0E7SUFDUDBGLFNBQVNBO0lBQ1QxSSxRQUFRQTtJQUNSTSxXQUFXQTtJQUNYQyxLQUFLQTtJQUNMRyxRQUFRQTtJQUNSQyxRQUFRQTtBQUNaO0FBRUEsaUVBQWVpSSxPQUFPQSxFQUFDO0FBQ3lHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2lraS1tYXNzYWdlLy4vbm9kZV9tb2R1bGVzL0B0d2VlbmpzL3R3ZWVuLmpzL2Rpc3QvdHdlZW4uZXNtLmpzP2I2MDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgRWFzZSBjbGFzcyBwcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgZWFzaW5nIGZ1bmN0aW9ucyBmb3IgdXNlIHdpdGggdHdlZW4uanMuXG4gKi9cbnZhciBFYXNpbmcgPSB7XG4gICAgTGluZWFyOiB7XG4gICAgICAgIE5vbmU6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBRdWFkcmF0aWM6IHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudCAqICgyIC0gYW1vdW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTAuNSAqICgtLWFtb3VudCAqIChhbW91bnQgLSAyKSAtIDEpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgQ3ViaWM6IHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIC0tYW1vdW50ICogYW1vdW50ICogYW1vdW50ICsgMTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKChhbW91bnQgLT0gMikgKiBhbW91bnQgKiBhbW91bnQgKyAyKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIFF1YXJ0aWM6IHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgLSAtLWFtb3VudCAqIGFtb3VudCAqIGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTAuNSAqICgoYW1vdW50IC09IDIpICogYW1vdW50ICogYW1vdW50ICogYW1vdW50IC0gMik7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBRdWludGljOiB7XG4gICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50O1xuICAgICAgICB9LFxuICAgICAgICBPdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAtLWFtb3VudCAqIGFtb3VudCAqIGFtb3VudCAqIGFtb3VudCAqIGFtb3VudCArIDE7XG4gICAgICAgIH0sXG4gICAgICAgIEluT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICBpZiAoKGFtb3VudCAqPSAyKSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMC41ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDAuNSAqICgoYW1vdW50IC09IDIpICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICsgMik7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBTaW51c29pZGFsOiB7XG4gICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gMSAtIE1hdGguY29zKChhbW91bnQgKiBNYXRoLlBJKSAvIDIpO1xuICAgICAgICB9LFxuICAgICAgICBPdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNpbigoYW1vdW50ICogTWF0aC5QSSkgLyAyKTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBhbW91bnQpKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIEV4cG9uZW50aWFsOiB7XG4gICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50ID09PSAwID8gMCA6IE1hdGgucG93KDEwMjQsIGFtb3VudCAtIDEpO1xuICAgICAgICB9LFxuICAgICAgICBPdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgPT09IDEgPyAxIDogMSAtIE1hdGgucG93KDIsIC0xMCAqIGFtb3VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIEluT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGFtb3VudCAqPSAyKSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMC41ICogTWF0aC5wb3coMTAyNCwgYW1vdW50IC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAoYW1vdW50IC0gMSkpICsgMik7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBDaXJjdWxhcjoge1xuICAgICAgICBJbjogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIGFtb3VudCAqIGFtb3VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS1hbW91bnQgKiBhbW91bnQpO1xuICAgICAgICB9LFxuICAgICAgICBJbk91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgaWYgKChhbW91bnQgKj0gMikgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSBhbW91bnQgKiBhbW91bnQpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKGFtb3VudCAtPSAyKSAqIGFtb3VudCkgKyAxKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIEVsYXN0aWM6IHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmIChhbW91bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbW91bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtTWF0aC5wb3coMiwgMTAgKiAoYW1vdW50IC0gMSkpICogTWF0aC5zaW4oKGFtb3VudCAtIDEuMSkgKiA1ICogTWF0aC5QSSk7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIC0xMCAqIGFtb3VudCkgKiBNYXRoLnNpbigoYW1vdW50IC0gMC4xKSAqIDUgKiBNYXRoLlBJKSArIDE7XG4gICAgICAgIH0sXG4gICAgICAgIEluT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbW91bnQgKj0gMjtcbiAgICAgICAgICAgIGlmIChhbW91bnQgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0wLjUgKiBNYXRoLnBvdygyLCAxMCAqIChhbW91bnQgLSAxKSkgKiBNYXRoLnNpbigoYW1vdW50IC0gMS4xKSAqIDUgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwLjUgKiBNYXRoLnBvdygyLCAtMTAgKiAoYW1vdW50IC0gMSkpICogTWF0aC5zaW4oKGFtb3VudCAtIDEuMSkgKiA1ICogTWF0aC5QSSkgKyAxO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgQmFjazoge1xuICAgICAgICBJbjogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudCAqIGFtb3VudCAqICgocyArIDEpICogYW1vdW50IC0gcyk7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgdmFyIHMgPSAxLjcwMTU4O1xuICAgICAgICAgICAgcmV0dXJuIC0tYW1vdW50ICogYW1vdW50ICogKChzICsgMSkgKiBhbW91bnQgKyBzKSArIDE7XG4gICAgICAgIH0sXG4gICAgICAgIEluT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTggKiAxLjUyNTtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiAoYW1vdW50ICogYW1vdW50ICogKChzICsgMSkgKiBhbW91bnQgLSBzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKChhbW91bnQgLT0gMikgKiBhbW91bnQgKiAoKHMgKyAxKSAqIGFtb3VudCArIHMpICsgMik7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBCb3VuY2U6IHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC0gRWFzaW5nLkJvdW5jZS5PdXQoMSAtIGFtb3VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgaWYgKGFtb3VudCA8IDEgLyAyLjc1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcuNTYyNSAqIGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFtb3VudCA8IDIgLyAyLjc1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcuNTYyNSAqIChhbW91bnQgLT0gMS41IC8gMi43NSkgKiBhbW91bnQgKyAwLjc1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYW1vdW50IDwgMi41IC8gMi43NSkge1xuICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiAoYW1vdW50IC09IDIuMjUgLyAyLjc1KSAqIGFtb3VudCArIDAuOTM3NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiAoYW1vdW50IC09IDIuNjI1IC8gMi43NSkgKiBhbW91bnQgKyAwLjk4NDM3NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmIChhbW91bnQgPCAwLjUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRWFzaW5nLkJvdW5jZS5JbihhbW91bnQgKiAyKSAqIDAuNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBFYXNpbmcuQm91bmNlLk91dChhbW91bnQgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbnZhciBub3c7XG4vLyBJbmNsdWRlIGEgcGVyZm9ybWFuY2Uubm93IHBvbHlmaWxsLlxuLy8gSW4gbm9kZS5qcywgdXNlIHByb2Nlc3MuaHJ0aW1lLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4vLyBAdHMtaWdub3JlXG5pZiAodHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmhydGltZSkge1xuICAgIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZSgpO1xuICAgICAgICAvLyBDb252ZXJ0IFtzZWNvbmRzLCBuYW5vc2Vjb25kc10gdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICByZXR1cm4gdGltZVswXSAqIDEwMDAgKyB0aW1lWzFdIC8gMTAwMDAwMDtcbiAgICB9O1xufVxuLy8gSW4gYSBicm93c2VyLCB1c2Ugc2VsZi5wZXJmb3JtYW5jZS5ub3cgaWYgaXQgaXMgYXZhaWxhYmxlLlxuZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYucGVyZm9ybWFuY2UgIT09IHVuZGVmaW5lZCAmJiBzZWxmLnBlcmZvcm1hbmNlLm5vdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVGhpcyBtdXN0IGJlIGJvdW5kLCBiZWNhdXNlIGRpcmVjdGx5IGFzc2lnbmluZyB0aGlzIGZ1bmN0aW9uXG4gICAgLy8gbGVhZHMgdG8gYW4gaW52b2NhdGlvbiBleGNlcHRpb24gaW4gQ2hyb21lLlxuICAgIG5vdyA9IHNlbGYucGVyZm9ybWFuY2Uubm93LmJpbmQoc2VsZi5wZXJmb3JtYW5jZSk7XG59XG4vLyBVc2UgRGF0ZS5ub3cgaWYgaXQgaXMgYXZhaWxhYmxlLlxuZWxzZSBpZiAoRGF0ZS5ub3cgIT09IHVuZGVmaW5lZCkge1xuICAgIG5vdyA9IERhdGUubm93O1xufVxuLy8gT3RoZXJ3aXNlLCB1c2UgJ25ldyBEYXRlKCkuZ2V0VGltZSgpJy5cbmVsc2Uge1xuICAgIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH07XG59XG52YXIgbm93JDEgPSBub3c7XG5cbi8qKlxuICogQ29udHJvbGxpbmcgZ3JvdXBzIG9mIHR3ZWVuc1xuICpcbiAqIFVzaW5nIHRoZSBUV0VFTiBzaW5nbGV0b24gdG8gbWFuYWdlIHlvdXIgdHdlZW5zIGNhbiBjYXVzZSBpc3N1ZXMgaW4gbGFyZ2UgYXBwcyB3aXRoIG1hbnkgY29tcG9uZW50cy5cbiAqIEluIHRoZXNlIGNhc2VzLCB5b3UgbWF5IHdhbnQgdG8gY3JlYXRlIHlvdXIgb3duIHNtYWxsZXIgZ3JvdXBzIG9mIHR3ZWVuXG4gKi9cbnZhciBHcm91cCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHcm91cCgpIHtcbiAgICAgICAgdGhpcy5fdHdlZW5zID0ge307XG4gICAgICAgIHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlID0ge307XG4gICAgfVxuICAgIEdyb3VwLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90d2VlbnMpLm1hcChmdW5jdGlvbiAodHdlZW5JZCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl90d2VlbnNbdHdlZW5JZF07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgR3JvdXAucHJvdG90eXBlLnJlbW92ZUFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdHdlZW5zID0ge307XG4gICAgfTtcbiAgICBHcm91cC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHR3ZWVuKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVuc1t0d2Vlbi5nZXRJZCgpXSA9IHR3ZWVuO1xuICAgICAgICB0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZVt0d2Vlbi5nZXRJZCgpXSA9IHR3ZWVuO1xuICAgIH07XG4gICAgR3JvdXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICBkZWxldGUgdGhpcy5fdHdlZW5zW3R3ZWVuLmdldElkKCldO1xuICAgICAgICBkZWxldGUgdGhpcy5fdHdlZW5zQWRkZWREdXJpbmdVcGRhdGVbdHdlZW4uZ2V0SWQoKV07XG4gICAgfTtcbiAgICBHcm91cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRpbWUsIHByZXNlcnZlKSB7XG4gICAgICAgIGlmICh0aW1lID09PSB2b2lkIDApIHsgdGltZSA9IG5vdyQxKCk7IH1cbiAgICAgICAgaWYgKHByZXNlcnZlID09PSB2b2lkIDApIHsgcHJlc2VydmUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgdHdlZW5JZHMgPSBPYmplY3Qua2V5cyh0aGlzLl90d2VlbnMpO1xuICAgICAgICBpZiAodHdlZW5JZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHdlZW5zIGFyZSB1cGRhdGVkIGluIFwiYmF0Y2hlc1wiLiBJZiB5b3UgYWRkIGEgbmV3IHR3ZWVuIGR1cmluZyBhblxuICAgICAgICAvLyB1cGRhdGUsIHRoZW4gdGhlIG5ldyB0d2VlbiB3aWxsIGJlIHVwZGF0ZWQgaW4gdGhlIG5leHQgYmF0Y2guXG4gICAgICAgIC8vIElmIHlvdSByZW1vdmUgYSB0d2VlbiBkdXJpbmcgYW4gdXBkYXRlLCBpdCBtYXkgb3IgbWF5IG5vdCBiZSB1cGRhdGVkLlxuICAgICAgICAvLyBIb3dldmVyLCBpZiB0aGUgcmVtb3ZlZCB0d2VlbiB3YXMgYWRkZWQgZHVyaW5nIHRoZSBjdXJyZW50IGJhdGNoLFxuICAgICAgICAvLyB0aGVuIGl0IHdpbGwgbm90IGJlIHVwZGF0ZWQuXG4gICAgICAgIHdoaWxlICh0d2Vlbklkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZSA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0d2Vlbklkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB0d2VlbiA9IHRoaXMuX3R3ZWVuc1t0d2Vlbklkc1tpXV07XG4gICAgICAgICAgICAgICAgdmFyIGF1dG9TdGFydCA9ICFwcmVzZXJ2ZTtcbiAgICAgICAgICAgICAgICBpZiAodHdlZW4gJiYgdHdlZW4udXBkYXRlKHRpbWUsIGF1dG9TdGFydCkgPT09IGZhbHNlICYmICFwcmVzZXJ2ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdHdlZW5zW3R3ZWVuSWRzW2ldXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0d2VlbklkcyA9IE9iamVjdC5rZXlzKHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBHcm91cDtcbn0oKSk7XG5cbi8qKlxuICpcbiAqL1xudmFyIEludGVycG9sYXRpb24gPSB7XG4gICAgTGluZWFyOiBmdW5jdGlvbiAodiwgaykge1xuICAgICAgICB2YXIgbSA9IHYubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGYgPSBtICogaztcbiAgICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKGYpO1xuICAgICAgICB2YXIgZm4gPSBJbnRlcnBvbGF0aW9uLlV0aWxzLkxpbmVhcjtcbiAgICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odlswXSwgdlsxXSwgZik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odlttXSwgdlttIC0gMV0sIG0gLSBmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4odltpXSwgdltpICsgMSA+IG0gPyBtIDogaSArIDFdLCBmIC0gaSk7XG4gICAgfSxcbiAgICBCZXppZXI6IGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgIHZhciBiID0gMDtcbiAgICAgICAgdmFyIG4gPSB2Lmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBwdyA9IE1hdGgucG93O1xuICAgICAgICB2YXIgYm4gPSBJbnRlcnBvbGF0aW9uLlV0aWxzLkJlcm5zdGVpbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgICAgICBiICs9IHB3KDEgLSBrLCBuIC0gaSkgKiBwdyhrLCBpKSAqIHZbaV0gKiBibihuLCBpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYjtcbiAgICB9LFxuICAgIENhdG11bGxSb206IGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgIHZhciBtID0gdi5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgZiA9IG0gKiBrO1xuICAgICAgICB2YXIgaSA9IE1hdGguZmxvb3IoZik7XG4gICAgICAgIHZhciBmbiA9IEludGVycG9sYXRpb24uVXRpbHMuQ2F0bXVsbFJvbTtcbiAgICAgICAgaWYgKHZbMF0gPT09IHZbbV0pIHtcbiAgICAgICAgICAgIGlmIChrIDwgMCkge1xuICAgICAgICAgICAgICAgIGkgPSBNYXRoLmZsb29yKChmID0gbSAqICgxICsgaykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbih2WyhpIC0gMSArIG0pICUgbV0sIHZbaV0sIHZbKGkgKyAxKSAlIG1dLCB2WyhpICsgMikgJSBtXSwgZiAtIGkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZbMF0gLSAoZm4odlswXSwgdlswXSwgdlsxXSwgdlsxXSwgLWYpIC0gdlswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoayA+IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlttXSAtIChmbih2W21dLCB2W21dLCB2W20gLSAxXSwgdlttIC0gMV0sIGYgLSBtKSAtIHZbbV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuKHZbaSA/IGkgLSAxIDogMF0sIHZbaV0sIHZbbSA8IGkgKyAxID8gbSA6IGkgKyAxXSwgdlttIDwgaSArIDIgPyBtIDogaSArIDJdLCBmIC0gaSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFV0aWxzOiB7XG4gICAgICAgIExpbmVhcjogZnVuY3Rpb24gKHAwLCBwMSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIChwMSAtIHAwKSAqIHQgKyBwMDtcbiAgICAgICAgfSxcbiAgICAgICAgQmVybnN0ZWluOiBmdW5jdGlvbiAobiwgaSkge1xuICAgICAgICAgICAgdmFyIGZjID0gSW50ZXJwb2xhdGlvbi5VdGlscy5GYWN0b3JpYWw7XG4gICAgICAgICAgICByZXR1cm4gZmMobikgLyBmYyhpKSAvIGZjKG4gLSBpKTtcbiAgICAgICAgfSxcbiAgICAgICAgRmFjdG9yaWFsOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBbMV07XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKGFbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbbl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBuOyBpID4gMTsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgKj0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYVtuXSA9IHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSgpLFxuICAgICAgICBDYXRtdWxsUm9tOiBmdW5jdGlvbiAocDAsIHAxLCBwMiwgcDMsIHQpIHtcbiAgICAgICAgICAgIHZhciB2MCA9IChwMiAtIHAwKSAqIDAuNTtcbiAgICAgICAgICAgIHZhciB2MSA9IChwMyAtIHAxKSAqIDAuNTtcbiAgICAgICAgICAgIHZhciB0MiA9IHQgKiB0O1xuICAgICAgICAgICAgdmFyIHQzID0gdCAqIHQyO1xuICAgICAgICAgICAgcmV0dXJuICgyICogcDEgLSAyICogcDIgKyB2MCArIHYxKSAqIHQzICsgKC0zICogcDEgKyAzICogcDIgLSAyICogdjAgLSB2MSkgKiB0MiArIHYwICogdCArIHAxO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuXG4vKipcbiAqIFV0aWxzXG4gKi9cbnZhciBTZXF1ZW5jZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXF1ZW5jZSgpIHtcbiAgICB9XG4gICAgU2VxdWVuY2UubmV4dElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gU2VxdWVuY2UuX25leHRJZCsrO1xuICAgIH07XG4gICAgU2VxdWVuY2UuX25leHRJZCA9IDA7XG4gICAgcmV0dXJuIFNlcXVlbmNlO1xufSgpKTtcblxudmFyIG1haW5Hcm91cCA9IG5ldyBHcm91cCgpO1xuXG4vKipcbiAqIFR3ZWVuLmpzIC0gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qcy9ncmFwaHMvY29udHJpYnV0b3JzIGZvciB0aGUgZnVsbCBsaXN0IG9mIGNvbnRyaWJ1dG9ycy5cbiAqIFRoYW5rIHlvdSBhbGwsIHlvdSdyZSBhd2Vzb21lIVxuICovXG52YXIgVHdlZW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHdlZW4oX29iamVjdCwgX2dyb3VwKSB7XG4gICAgICAgIGlmIChfZ3JvdXAgPT09IHZvaWQgMCkgeyBfZ3JvdXAgPSBtYWluR3JvdXA7IH1cbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gX29iamVjdDtcbiAgICAgICAgdGhpcy5fZ3JvdXAgPSBfZ3JvdXA7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhdXNlU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLl92YWx1ZXNTdGFydCA9IHt9O1xuICAgICAgICB0aGlzLl92YWx1ZXNFbmQgPSB7fTtcbiAgICAgICAgdGhpcy5fdmFsdWVzU3RhcnRSZXBlYXQgPSB7fTtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAxMDAwO1xuICAgICAgICB0aGlzLl9pbml0aWFsUmVwZWF0ID0gMDtcbiAgICAgICAgdGhpcy5fcmVwZWF0ID0gMDtcbiAgICAgICAgdGhpcy5feW95byA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGVsYXlUaW1lID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5fZWFzaW5nRnVuY3Rpb24gPSBFYXNpbmcuTGluZWFyLk5vbmU7XG4gICAgICAgIHRoaXMuX2ludGVycG9sYXRpb25GdW5jdGlvbiA9IEludGVycG9sYXRpb24uTGluZWFyO1xuICAgICAgICB0aGlzLl9jaGFpbmVkVHdlZW5zID0gW107XG4gICAgICAgIHRoaXMuX29uU3RhcnRDYWxsYmFja0ZpcmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lkID0gU2VxdWVuY2UubmV4dElkKCk7XG4gICAgICAgIHRoaXMuX2lzQ2hhaW5TdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2dvVG9FbmQgPSBmYWxzZTtcbiAgICB9XG4gICAgVHdlZW4ucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuaXNQbGF5aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNQbGF5aW5nO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNQYXVzZWQ7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAocHJvcGVydGllcywgZHVyYXRpb24pIHtcbiAgICAgICAgLy8gVE9ETz8gcmVzdG9yZSB0aGlzLCB0aGVuIHVwZGF0ZSB0aGUgMDdfZHluYW1pY190byBleGFtcGxlIHRvIHNldCBmb3hcbiAgICAgICAgLy8gdHdlZW4ncyB0byBvbiBlYWNoIHVwZGF0ZS4gVGhhdCB3YXkgdGhlIGJlaGF2aW9yIGlzIG9wdC1pbiAodGhlcmUnc1xuICAgICAgICAvLyBjdXJyZW50bHkgbm8gb3B0LW91dCkuXG4gICAgICAgIC8vIGZvciAoY29uc3QgcHJvcCBpbiBwcm9wZXJ0aWVzKSB0aGlzLl92YWx1ZXNFbmRbcHJvcF0gPSBwcm9wZXJ0aWVzW3Byb3BdXG4gICAgICAgIHRoaXMuX3ZhbHVlc0VuZCA9IE9iamVjdC5jcmVhdGUocHJvcGVydGllcyk7XG4gICAgICAgIGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB0aGlzLl9ncm91cCAmJiB0aGlzLl9ncm91cC5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMuX3JlcGVhdCA9IHRoaXMuX2luaXRpYWxSZXBlYXQ7XG4gICAgICAgIGlmICh0aGlzLl9yZXZlcnNlZCkge1xuICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSByZXZlcnNlZCAoZi5lLiB1c2luZyB0aGUgeW95byBmZWF0dXJlKSB0aGVuIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGZsaXAgdGhlIHR3ZWVuIGRpcmVjdGlvbiBiYWNrIHRvIGZvcndhcmQuXG4gICAgICAgICAgICB0aGlzLl9yZXZlcnNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcy5fdmFsdWVzU3RhcnRSZXBlYXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zd2FwRW5kU3RhcnRSZXBlYXRWYWx1ZXMocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0NoYWluU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aW1lICE9PSB1bmRlZmluZWQgPyAodHlwZW9mIHRpbWUgPT09ICdzdHJpbmcnID8gbm93JDEoKSArIHBhcnNlRmxvYXQodGltZSkgOiB0aW1lKSA6IG5vdyQxKCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSArPSB0aGlzLl9kZWxheVRpbWU7XG4gICAgICAgIHRoaXMuX3NldHVwUHJvcGVydGllcyh0aGlzLl9vYmplY3QsIHRoaXMuX3ZhbHVlc1N0YXJ0LCB0aGlzLl92YWx1ZXNFbmQsIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuX3NldHVwUHJvcGVydGllcyA9IGZ1bmN0aW9uIChfb2JqZWN0LCBfdmFsdWVzU3RhcnQsIF92YWx1ZXNFbmQsIF92YWx1ZXNTdGFydFJlcGVhdCkge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBfdmFsdWVzRW5kKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRWYWx1ZSA9IF9vYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgdmFyIHN0YXJ0VmFsdWVJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzdGFydFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBwcm9wVHlwZSA9IHN0YXJ0VmFsdWVJc0FycmF5ID8gJ2FycmF5JyA6IHR5cGVvZiBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdmFyIGlzSW50ZXJwb2xhdGlvbkxpc3QgPSAhc3RhcnRWYWx1ZUlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheShfdmFsdWVzRW5kW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAvLyBJZiBgdG8oKWAgc3BlY2lmaWVzIGEgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0LFxuICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIG5vdCBzZXQgdGhhdCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0XG4gICAgICAgICAgICBpZiAocHJvcFR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHByb3BUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhbiBBcnJheSB3YXMgcHJvdmlkZWQgYXMgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICAgIGlmIChpc0ludGVycG9sYXRpb25MaXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZFZhbHVlcyA9IF92YWx1ZXNFbmRbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIGlmIChlbmRWYWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgYW4gYXJyYXkgb2YgcmVsYXRpdmUgdmFsdWVzXG4gICAgICAgICAgICAgICAgZW5kVmFsdWVzID0gZW5kVmFsdWVzLm1hcCh0aGlzLl9oYW5kbGVSZWxhdGl2ZVZhbHVlLmJpbmQodGhpcywgc3RhcnRWYWx1ZSkpO1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGxvY2FsIGNvcHkgb2YgdGhlIEFycmF5IHdpdGggdGhlIHN0YXJ0IHZhbHVlIGF0IHRoZSBmcm9udFxuICAgICAgICAgICAgICAgIF92YWx1ZXNFbmRbcHJvcGVydHldID0gW3N0YXJ0VmFsdWVdLmNvbmNhdChlbmRWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBkZWVwbmVzcyBvZiB0aGUgdmFsdWVzXG4gICAgICAgICAgICBpZiAoKHByb3BUeXBlID09PSAnb2JqZWN0JyB8fCBzdGFydFZhbHVlSXNBcnJheSkgJiYgc3RhcnRWYWx1ZSAmJiAhaXNJbnRlcnBvbGF0aW9uTGlzdCkge1xuICAgICAgICAgICAgICAgIF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPSBzdGFydFZhbHVlSXNBcnJheSA/IFtdIDoge307XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIEZJWE1FP1xuICAgICAgICAgICAgICAgICAgICBfdmFsdWVzU3RhcnRbcHJvcGVydHldW3Byb3BdID0gc3RhcnRWYWx1ZVtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IHN0YXJ0VmFsdWVJc0FycmF5ID8gW10gOiB7fTsgLy8gVE9ETz8gcmVwZWF0IG5lc3RlZCB2YWx1ZXM/IEFuZCB5b3lvPyBBbmQgYXJyYXkgdmFsdWVzP1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUU/XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBQcm9wZXJ0aWVzKHN0YXJ0VmFsdWUsIF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0sIF92YWx1ZXNFbmRbcHJvcGVydHldLCBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIHN0YXJ0aW5nIHZhbHVlLCBidXQgb25seSBvbmNlLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc3RhcnRWYWx1ZUlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUU/XG4gICAgICAgICAgICAgICAgICAgIF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gKj0gMS4wOyAvLyBFbnN1cmVzIHdlJ3JlIHVzaW5nIG51bWJlcnMsIG5vdCBzdHJpbmdzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0ludGVycG9sYXRpb25MaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIEZJWE1FP1xuICAgICAgICAgICAgICAgICAgICBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldID0gX3ZhbHVlc0VuZFtwcm9wZXJ0eV0uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldID0gX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSB8fCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNDaGFpblN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ2hhaW5TdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc3RvcENoYWluZWRUd2VlbnMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzUGxheWluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHRoaXMuX2dyb3VwICYmIHRoaXMuX2dyb3VwLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9vblN0b3BDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fb25TdG9wQ2FsbGJhY2sodGhpcy5fb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2dvVG9FbmQgPSB0cnVlO1xuICAgICAgICB0aGlzLnVwZGF0ZShJbmZpbml0eSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgaWYgKHRpbWUgPT09IHZvaWQgMCkgeyB0aW1lID0gbm93JDEoKTsgfVxuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQgfHwgIXRoaXMuX2lzUGxheWluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wYXVzZVN0YXJ0ID0gdGltZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHRoaXMuX2dyb3VwICYmIHRoaXMuX2dyb3VwLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgaWYgKHRpbWUgPT09IHZvaWQgMCkgeyB0aW1lID0gbm93JDEoKTsgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzUGF1c2VkIHx8ICF0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSArPSB0aW1lIC0gdGhpcy5fcGF1c2VTdGFydDtcbiAgICAgICAgdGhpcy5fcGF1c2VTdGFydCA9IDA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB0aGlzLl9ncm91cCAmJiB0aGlzLl9ncm91cC5hZGQodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLnN0b3BDaGFpbmVkVHdlZW5zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IHRoaXMuX2NoYWluZWRUd2VlbnMubGVuZ3RoOyBpIDwgbnVtQ2hhaW5lZFR3ZWVuczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFpbmVkVHdlZW5zW2ldLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5ncm91cCA9IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgdGhpcy5fZGVsYXlUaW1lID0gYW1vdW50O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5yZXBlYXQgPSBmdW5jdGlvbiAodGltZXMpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbFJlcGVhdCA9IHRpbWVzO1xuICAgICAgICB0aGlzLl9yZXBlYXQgPSB0aW1lcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUucmVwZWF0RGVsYXkgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIHRoaXMuX3JlcGVhdERlbGF5VGltZSA9IGFtb3VudDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUueW95byA9IGZ1bmN0aW9uICh5b3lvKSB7XG4gICAgICAgIHRoaXMuX3lveW8gPSB5b3lvO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5lYXNpbmcgPSBmdW5jdGlvbiAoZWFzaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fZWFzaW5nRnVuY3Rpb24gPSBlYXNpbmdGdW5jdGlvbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuaW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChpbnRlcnBvbGF0aW9uRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5faW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gaW50ZXJwb2xhdGlvbkZ1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdHdlZW5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2hhaW5lZFR3ZWVucyA9IHR3ZWVucztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUub25TdGFydCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUub25VcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5vblJlcGVhdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vblJlcGVhdENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLm9uU3RvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vblN0b3BDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHR3ZWVuIGlzIHN0aWxsIHBsYXlpbmcgYWZ0ZXIgdGhlIHVwZGF0ZSwgZmFsc2VcbiAgICAgKiBvdGhlcndpc2UgKGNhbGxpbmcgdXBkYXRlIG9uIGEgcGF1c2VkIHR3ZWVuIHN0aWxsIHJldHVybnMgdHJ1ZSBiZWNhdXNlXG4gICAgICogaXQgaXMgc3RpbGwgcGxheWluZywganVzdCBwYXVzZWQpLlxuICAgICAqL1xuICAgIFR3ZWVuLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGltZSwgYXV0b1N0YXJ0KSB7XG4gICAgICAgIGlmICh0aW1lID09PSB2b2lkIDApIHsgdGltZSA9IG5vdyQxKCk7IH1cbiAgICAgICAgaWYgKGF1dG9TdGFydCA9PT0gdm9pZCAwKSB7IGF1dG9TdGFydCA9IHRydWU7IH1cbiAgICAgICAgaWYgKHRoaXMuX2lzUGF1c2VkKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciBwcm9wZXJ0eTtcbiAgICAgICAgdmFyIGVsYXBzZWQ7XG4gICAgICAgIHZhciBlbmRUaW1lID0gdGhpcy5fc3RhcnRUaW1lICsgdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGlmICghdGhpcy5fZ29Ub0VuZCAmJiAhdGhpcy5faXNQbGF5aW5nKSB7XG4gICAgICAgICAgICBpZiAodGltZSA+IGVuZFRpbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGF1dG9TdGFydClcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dvVG9FbmQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRpbWUgPCB0aGlzLl9zdGFydFRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vblN0YXJ0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2sodGhpcy5fb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29uU3RhcnRDYWxsYmFja0ZpcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbGFwc2VkID0gKHRpbWUgLSB0aGlzLl9zdGFydFRpbWUpIC8gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGVsYXBzZWQgPSB0aGlzLl9kdXJhdGlvbiA9PT0gMCB8fCBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9lYXNpbmdGdW5jdGlvbihlbGFwc2VkKTtcbiAgICAgICAgLy8gcHJvcGVydGllcyB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgICAgdGhpcy5fdXBkYXRlUHJvcGVydGllcyh0aGlzLl9vYmplY3QsIHRoaXMuX3ZhbHVlc1N0YXJ0LCB0aGlzLl92YWx1ZXNFbmQsIHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuX29uVXBkYXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX29uVXBkYXRlQ2FsbGJhY2sodGhpcy5fb2JqZWN0LCBlbGFwc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxhcHNlZCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUodGhpcy5fcmVwZWF0KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXBlYXQtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVhc3NpZ24gc3RhcnRpbmcgdmFsdWVzLCByZXN0YXJ0IGJ5IG1ha2luZyBzdGFydFRpbWUgPSBub3dcbiAgICAgICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5feW95byAmJiB0eXBlb2YgdGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBGSVhNRT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gKyBwYXJzZUZsb2F0KHRoaXMuX3ZhbHVlc0VuZFtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl95b3lvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zd2FwRW5kU3RhcnRSZXBlYXRWYWx1ZXMocHJvcGVydHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3lveW8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZWQgPSAhdGhpcy5fcmV2ZXJzZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXBlYXREZWxheVRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aW1lICsgdGhpcy5fcmVwZWF0RGVsYXlUaW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGltZSArIHRoaXMuX2RlbGF5VGltZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uUmVwZWF0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25SZXBlYXRDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vbkNvbXBsZXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrKHRoaXMuX29iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBudW1DaGFpbmVkVHdlZW5zID0gdGhpcy5fY2hhaW5lZFR3ZWVucy5sZW5ndGg7IGkgPCBudW1DaGFpbmVkVHdlZW5zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSB0aGUgY2hhaW5lZCB0d2VlbnMgc3RhcnQgZXhhY3RseSBhdCB0aGUgdGltZSB0aGV5IHNob3VsZCxcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbiBpZiB0aGUgYHVwZGF0ZSgpYCBtZXRob2Qgd2FzIGNhbGxlZCB3YXkgcGFzdCB0aGUgZHVyYXRpb24gb2YgdGhlIHR3ZWVuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYWluZWRUd2VlbnNbaV0uc3RhcnQodGhpcy5fc3RhcnRUaW1lICsgdGhpcy5fZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuX3VwZGF0ZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAoX29iamVjdCwgX3ZhbHVlc1N0YXJ0LCBfdmFsdWVzRW5kLCB2YWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBfdmFsdWVzRW5kKSB7XG4gICAgICAgICAgICAvLyBEb24ndCB1cGRhdGUgcHJvcGVydGllcyB0aGF0IGRvIG5vdCBleGlzdCBpbiB0aGUgc291cmNlIG9iamVjdFxuICAgICAgICAgICAgaWYgKF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSB8fCAwO1xuICAgICAgICAgICAgdmFyIGVuZCA9IF92YWx1ZXNFbmRbcHJvcGVydHldO1xuICAgICAgICAgICAgdmFyIHN0YXJ0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX29iamVjdFtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgdmFyIGVuZElzQXJyYXkgPSBBcnJheS5pc0FycmF5KGVuZCk7XG4gICAgICAgICAgICB2YXIgaXNJbnRlcnBvbGF0aW9uTGlzdCA9ICFzdGFydElzQXJyYXkgJiYgZW5kSXNBcnJheTtcbiAgICAgICAgICAgIGlmIChpc0ludGVycG9sYXRpb25MaXN0KSB7XG4gICAgICAgICAgICAgICAgX29iamVjdFtwcm9wZXJ0eV0gPSB0aGlzLl9pbnRlcnBvbGF0aW9uRnVuY3Rpb24oZW5kLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnb2JqZWN0JyAmJiBlbmQpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIEZJWE1FP1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByb3BlcnRpZXMoX29iamVjdFtwcm9wZXJ0eV0sIHN0YXJ0LCBlbmQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlcyByZWxhdGl2ZSBlbmQgdmFsdWVzIHdpdGggc3RhcnQgYXMgYmFzZSAoZS5nLjogKzEwLCAtMylcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLl9oYW5kbGVSZWxhdGl2ZVZhbHVlKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCBub24gbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBGSVhNRT9cbiAgICAgICAgICAgICAgICAgICAgX29iamVjdFtwcm9wZXJ0eV0gPSBzdGFydCArIChlbmQgLSBzdGFydCkgKiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5faGFuZGxlUmVsYXRpdmVWYWx1ZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW5kICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGVuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kLmNoYXJBdCgwKSA9PT0gJysnIHx8IGVuZC5jaGFyQXQoMCkgPT09ICctJykge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0ICsgcGFyc2VGbG9hdChlbmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZW5kKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLl9zd2FwRW5kU3RhcnRSZXBlYXRWYWx1ZXMgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgdmFyIHRtcCA9IHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcbiAgICAgICAgdmFyIGVuZFZhbHVlID0gdGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSArIHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldID0gdGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldID0gdG1wO1xuICAgIH07XG4gICAgcmV0dXJuIFR3ZWVuO1xufSgpKTtcblxudmFyIFZFUlNJT04gPSAnMTguNi40JztcblxuLyoqXG4gKiBUd2Vlbi5qcyAtIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3R3ZWVuanMvdHdlZW4uanNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3ZWVuanMvdHdlZW4uanMvZ3JhcGhzL2NvbnRyaWJ1dG9ycyBmb3IgdGhlIGZ1bGwgbGlzdCBvZiBjb250cmlidXRvcnMuXG4gKiBUaGFuayB5b3UgYWxsLCB5b3UncmUgYXdlc29tZSFcbiAqL1xudmFyIG5leHRJZCA9IFNlcXVlbmNlLm5leHRJZDtcbi8qKlxuICogQ29udHJvbGxpbmcgZ3JvdXBzIG9mIHR3ZWVuc1xuICpcbiAqIFVzaW5nIHRoZSBUV0VFTiBzaW5nbGV0b24gdG8gbWFuYWdlIHlvdXIgdHdlZW5zIGNhbiBjYXVzZSBpc3N1ZXMgaW4gbGFyZ2UgYXBwcyB3aXRoIG1hbnkgY29tcG9uZW50cy5cbiAqIEluIHRoZXNlIGNhc2VzLCB5b3UgbWF5IHdhbnQgdG8gY3JlYXRlIHlvdXIgb3duIHNtYWxsZXIgZ3JvdXBzIG9mIHR3ZWVucy5cbiAqL1xudmFyIFRXRUVOID0gbWFpbkdyb3VwO1xuLy8gVGhpcyBpcyB0aGUgYmVzdCB3YXkgdG8gZXhwb3J0IHRoaW5ncyBpbiBhIHdheSB0aGF0J3MgY29tcGF0aWJsZSB3aXRoIGJvdGggRVNcbi8vIE1vZHVsZXMgYW5kIENvbW1vbkpTLCB3aXRob3V0IGJ1aWxkIGhhY2tzLCBhbmQgc28gYXMgbm90IHRvIGJyZWFrIHRoZVxuLy8gZXhpc3RpbmcgQVBJLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzE5NjEjaXNzdWVjb21tZW50LTQyMzAzNzg4MVxudmFyIGdldEFsbCA9IFRXRUVOLmdldEFsbC5iaW5kKFRXRUVOKTtcbnZhciByZW1vdmVBbGwgPSBUV0VFTi5yZW1vdmVBbGwuYmluZChUV0VFTik7XG52YXIgYWRkID0gVFdFRU4uYWRkLmJpbmQoVFdFRU4pO1xudmFyIHJlbW92ZSA9IFRXRUVOLnJlbW92ZS5iaW5kKFRXRUVOKTtcbnZhciB1cGRhdGUgPSBUV0VFTi51cGRhdGUuYmluZChUV0VFTik7XG52YXIgZXhwb3J0cyA9IHtcbiAgICBFYXNpbmc6IEVhc2luZyxcbiAgICBHcm91cDogR3JvdXAsXG4gICAgSW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGlvbixcbiAgICBub3c6IG5vdyQxLFxuICAgIFNlcXVlbmNlOiBTZXF1ZW5jZSxcbiAgICBuZXh0SWQ6IG5leHRJZCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVkVSU0lPTjogVkVSU0lPTixcbiAgICBnZXRBbGw6IGdldEFsbCxcbiAgICByZW1vdmVBbGw6IHJlbW92ZUFsbCxcbiAgICBhZGQ6IGFkZCxcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHM7XG5leHBvcnQgeyBFYXNpbmcsIEdyb3VwLCBJbnRlcnBvbGF0aW9uLCBTZXF1ZW5jZSwgVHdlZW4sIFZFUlNJT04sIGFkZCwgZ2V0QWxsLCBuZXh0SWQsIG5vdyQxIGFzIG5vdywgcmVtb3ZlLCByZW1vdmVBbGwsIHVwZGF0ZSB9O1xuIl0sIm5hbWVzIjpbIkVhc2luZyIsIkxpbmVhciIsIk5vbmUiLCJhbW91bnQiLCJRdWFkcmF0aWMiLCJJbiIsIk91dCIsIkluT3V0IiwiQ3ViaWMiLCJRdWFydGljIiwiUXVpbnRpYyIsIlNpbnVzb2lkYWwiLCJNYXRoIiwiY29zIiwiUEkiLCJzaW4iLCJFeHBvbmVudGlhbCIsInBvdyIsIkNpcmN1bGFyIiwic3FydCIsIkVsYXN0aWMiLCJCYWNrIiwicyIsIkJvdW5jZSIsIm5vdyIsInNlbGYiLCJwcm9jZXNzIiwiaHJ0aW1lIiwidGltZSIsInBlcmZvcm1hbmNlIiwidW5kZWZpbmVkIiwiYmluZCIsIkRhdGUiLCJnZXRUaW1lIiwibm93JDEiLCJHcm91cCIsIl90d2VlbnMiLCJfdHdlZW5zQWRkZWREdXJpbmdVcGRhdGUiLCJwcm90b3R5cGUiLCJnZXRBbGwiLCJfdGhpcyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJ0d2VlbklkIiwicmVtb3ZlQWxsIiwiYWRkIiwidHdlZW4iLCJnZXRJZCIsInJlbW92ZSIsInVwZGF0ZSIsInByZXNlcnZlIiwidHdlZW5JZHMiLCJsZW5ndGgiLCJpIiwiYXV0b1N0YXJ0IiwiSW50ZXJwb2xhdGlvbiIsInYiLCJrIiwibSIsImYiLCJmbG9vciIsImZuIiwiVXRpbHMiLCJCZXppZXIiLCJiIiwibiIsInB3IiwiYm4iLCJCZXJuc3RlaW4iLCJDYXRtdWxsUm9tIiwicDAiLCJwMSIsInQiLCJmYyIsIkZhY3RvcmlhbCIsImEiLCJwMiIsInAzIiwidjAiLCJ2MSIsInQyIiwidDMiLCJTZXF1ZW5jZSIsIm5leHRJZCIsIl9uZXh0SWQiLCJtYWluR3JvdXAiLCJUd2VlbiIsIl9vYmplY3QiLCJfZ3JvdXAiLCJfaXNQYXVzZWQiLCJfcGF1c2VTdGFydCIsIl92YWx1ZXNTdGFydCIsIl92YWx1ZXNFbmQiLCJfdmFsdWVzU3RhcnRSZXBlYXQiLCJfZHVyYXRpb24iLCJfaW5pdGlhbFJlcGVhdCIsIl9yZXBlYXQiLCJfeW95byIsIl9pc1BsYXlpbmciLCJfcmV2ZXJzZWQiLCJfZGVsYXlUaW1lIiwiX3N0YXJ0VGltZSIsIl9lYXNpbmdGdW5jdGlvbiIsIl9pbnRlcnBvbGF0aW9uRnVuY3Rpb24iLCJfY2hhaW5lZFR3ZWVucyIsIl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCIsIl9pZCIsIl9pc0NoYWluU3RvcHBlZCIsIl9nb1RvRW5kIiwiaXNQbGF5aW5nIiwiaXNQYXVzZWQiLCJ0byIsInByb3BlcnRpZXMiLCJkdXJhdGlvbiIsImNyZWF0ZSIsImQiLCJzdGFydCIsInByb3BlcnR5IiwiX3N3YXBFbmRTdGFydFJlcGVhdFZhbHVlcyIsInBhcnNlRmxvYXQiLCJfc2V0dXBQcm9wZXJ0aWVzIiwic3RhcnRWYWx1ZSIsInN0YXJ0VmFsdWVJc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwicHJvcFR5cGUiLCJpc0ludGVycG9sYXRpb25MaXN0IiwiZW5kVmFsdWVzIiwiX2hhbmRsZVJlbGF0aXZlVmFsdWUiLCJjb25jYXQiLCJwcm9wIiwic2xpY2UiLCJyZXZlcnNlIiwic3RvcCIsInN0b3BDaGFpbmVkVHdlZW5zIiwiX29uU3RvcENhbGxiYWNrIiwiZW5kIiwiSW5maW5pdHkiLCJwYXVzZSIsInJlc3VtZSIsIm51bUNoYWluZWRUd2VlbnMiLCJncm91cCIsImRlbGF5IiwicmVwZWF0IiwidGltZXMiLCJyZXBlYXREZWxheSIsIl9yZXBlYXREZWxheVRpbWUiLCJ5b3lvIiwiZWFzaW5nIiwiZWFzaW5nRnVuY3Rpb24iLCJpbnRlcnBvbGF0aW9uIiwiaW50ZXJwb2xhdGlvbkZ1bmN0aW9uIiwiY2hhaW4iLCJ0d2VlbnMiLCJfaSIsImFyZ3VtZW50cyIsIm9uU3RhcnQiLCJjYWxsYmFjayIsIl9vblN0YXJ0Q2FsbGJhY2siLCJvblVwZGF0ZSIsIl9vblVwZGF0ZUNhbGxiYWNrIiwib25SZXBlYXQiLCJfb25SZXBlYXRDYWxsYmFjayIsIm9uQ29tcGxldGUiLCJfb25Db21wbGV0ZUNhbGxiYWNrIiwib25TdG9wIiwiZWxhcHNlZCIsImVuZFRpbWUiLCJ2YWx1ZSIsIl91cGRhdGVQcm9wZXJ0aWVzIiwiaXNGaW5pdGUiLCJzdGFydElzQXJyYXkiLCJlbmRJc0FycmF5IiwiY2hhckF0IiwidG1wIiwiZW5kVmFsdWUiLCJWRVJTSU9OIiwiVFdFRU4iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js\n");

/***/ })

};
;